IBM Watson assignment is taking some time to define. There are non-disclosure problems too, and not many things are open.

So here is your next assignment:

Digital circuit simulator: Use prolog to implement AND, OR, NAND and NOT gates; then simulate more complex circuits.

Elaboration:

We will take an example. Suppose we are implementing an XOR circuit using AND, OR and NOT gates. We know that:

XOR(A,B)=(AB'+A'B)=OR(AND(A, NOT(B)), AND((NOT(A),B))

The prolog goal predicate
verify(IN,OUT)
will return 'yes'/'no' depending on whether the 4 combinations of IN give correct OUT or not, that is, for example,
verify(XOR, [1,1],0) should be 'yes' and
verify(XOR,[0,1],0) should be 'no' and so on

Now the XOR circuiit should be a set of predicates expressing the XOR property. Clearly 'the property' lies in the GATES and their CONNECTIONS. For XOR there are;
2 NOT gates
2 AND gates
1 OR gate
The definition of 'gates' and 'what it means to be connected' should be stored in a 'general' file. A particular circuit should be stored in the 'specific' file. That is there will be two files:
general.pl and
xor.pl

From one Boolean function to another, the latter file will change, like 'full-adder.pl'.

To repeat, 'general.pl' will be a set of predicates, and so will be xor.pl.

Define carefully with Prolog predicates:

1. Terminals/points
2. Their connections
3. High and low value on terminals
4. Connection between two points
5. AND, OR, NOT etc in terms of input and output relations.

Finally write the body as in

verify(IN,OUT):- <Body>.
